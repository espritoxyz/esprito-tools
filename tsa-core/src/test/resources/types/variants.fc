#include "../imports/stdlib.fc";


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    ;; in_msg starts with integer
    int op = in_msg~load_int(8);
    if (op == 0) {
        ;; the second value in in_msg is 10-bit integer
        int param = in_msg~load_int(10);
        var msg = begin_cell()
            .store_uint(param, 8)
            .end_cell();
        msg~impure_touch();
        return ();
    }
    if (op == 1) {
        ;; the second value in in_msg is dict constructor
        var param_dict = in_msg~load_dict();
        var msg = begin_cell()
            .store_dict(param_dict)
            .end_cell();
        msg~impure_touch();
        return ();
    }
    if (op == 2) {
        ;; the second value in in_msg is bit array
        var param_slice = in_msg~load_bits(100);
        var msg = begin_cell()
            .store_slice(param_slice)
            .end_cell();
        msg~impure_touch();
        return ();
    }
    if ((op > 2) & (op < 5)) {  {- op == 3 or 4 -}
        ;; the second value in in_msg is integer of symbolic size
        int param = in_msg~load_int(op);
        var msg = begin_cell()
            .store_uint(param, 8)
            .end_cell();
        msg~impure_touch();
        return ();
    }
    if ((op > 10) & (op < 13)) {  {- op == 11 or 12 -}
        ;; the second value in in_msg is bit array of symbolic size
        var param_slice = in_msg~load_bits(op);
        var msg = begin_cell()
            .store_slice(param_slice)
            .end_cell();
        msg~impure_touch();
        return ();
    }
}