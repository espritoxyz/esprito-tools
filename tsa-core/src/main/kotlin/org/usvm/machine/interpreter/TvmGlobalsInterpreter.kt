package org.usvm.machine.interpreter

import io.ksmt.expr.KBitVecValue
import io.ksmt.utils.BvUtils.bigIntValue
import org.ton.bytecode.TvmAppGlobalGetglobInst
import org.ton.bytecode.TvmAppGlobalGetglobvarInst
import org.ton.bytecode.TvmAppGlobalInst
import org.ton.bytecode.TvmAppGlobalSetglobInst
import org.ton.bytecode.TvmAppGlobalSetglobvarInst
import org.usvm.machine.TvmContext
import org.usvm.machine.TvmStepScope
import org.usvm.machine.state.consumeDefaultGas
import org.usvm.machine.state.consumeGas
import org.usvm.machine.state.newStmt
import org.usvm.machine.state.nextStmt
import org.usvm.machine.state.takeLastInt
import org.usvm.machine.state.toStackEntry

class TvmGlobalsInterpreter(private val ctx: TvmContext) {
    // TODO these instructions are used in bytecode generated by Tact, but there are very nontrivial
    fun visitGlobalInst(scope: TvmStepScope, stmt: TvmAppGlobalInst) {
        when (stmt) {
            is TvmAppGlobalGetglobInst -> {
                scope.consumeDefaultGas(stmt)

                scope.doWithState {
                    val value = registers.c7[stmt.k]
                    stack.addStackEntry(value.toStackEntry())
                }
            }
            is TvmAppGlobalGetglobvarInst -> {
                scope.consumeDefaultGas(stmt)

                scope.doWithState {
                    val index = (stack.takeLastInt() as? KBitVecValue<*>)?.bigIntValue()?.toInt()
                        ?: TODO("Get global variable with symbolic index")
                    val value = registers.c7[index]
                    stack.addStackEntry(value.toStackEntry())
                }
            }
            is TvmAppGlobalSetglobInst -> {
                // TODO complex gas 26 + |c7|
                scope.doWithState { consumeGas(26) }

                scope.doWithState {
                    val value = stack.takeLastEntry()

                    registers.c7[stmt.k] = value
                }
            }
            is TvmAppGlobalSetglobvarInst -> {
                // TODO complex gas 26 + |c7|
                scope.doWithState { consumeGas(26) }

                scope.doWithState {
                    val index = (stack.takeLastInt() as? KBitVecValue<*>)?.bigIntValue()?.toInt()
                        ?: TODO("Set global variable with symbolic index")
                    val value = stack.takeLastEntry()

                    registers.c7[index] = value
                }
            }
        }

        scope.doWithState { newStmt(stmt.nextStmt()) }
    }
}
