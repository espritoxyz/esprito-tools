"Fift.fif" include
"Asm.fif" include

PROGRAM{
  0  DECLMETHOD f_reverse
  1  DECLMETHOD f_blkswap
  2  DECLMETHOD f_rot
  3  DECLMETHOD f_blkdrop2
  4  DECLMETHOD f_blkdrop
  5  DECLMETHOD f_blkswx
  6  DECLMETHOD f_blkpush
  7  DECLMETHOD f_drop2
  8  DECLMETHOD f_dropx
  9  DECLMETHOD f_dup2
  10 DECLMETHOD f_push2
  11 DECLMETHOD f_push3
  12 DECLMETHOD f_xchg2
  13 DECLMETHOD f_over2
  14 DECLMETHOD f_swap2
  15 DECLMETHOD f_xcpu
  16 DECLMETHOD f_tuck
  17 DECLMETHOD f_minusrollx
  18 DECLMETHOD f_pick
  19 DECLMETHOD f_puxc
  20 DECLMETHOD f_revx
  21 DECLMETHOD f_rollx
  22 DECLMETHOD f_rotrev
  23 DECLMETHOD f_xchgx
  24 DECLMETHOD f_pu2xc
  25 DECLMETHOD f_puxc2
  26 DECLMETHOD f_puxcpu
  27 DECLMETHOD f_xc2pu
  28 DECLMETHOD f_xchg3
  29 DECLMETHOD f_xcpu2
  30 DECLMETHOD f_xcpuxc
  f_reverse PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT
    6 PUSHINT
    7 PUSHINT
    8 PUSHINT
    9 PUSHINT
    10 PUSHINT  // 0 1 2 3 4 5 6 7 8 9 10
    5 3 REVERSE // 0 1 2 7 6 5 4 3 8 9 10
  }>
  f_blkswap PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT
    6 PUSHINT
    7 PUSHINT
    8 PUSHINT
    9 PUSHINT
    10 PUSHINT  // 0 1 2 3 4 5 6 7 8 9 10
    5 3 BLKSWAP // 0 1 2 8 9 10 3 4 5 6 7
  }>
  f_rot PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT
    6 PUSHINT
    7 PUSHINT
    8 PUSHINT
    9 PUSHINT
    10 PUSHINT // 0 1 2 3 4 5 6 7 8 9 10
    ROT        // 0 1 2 3 4 5 6 7 9 10 8
  }>
  f_blkdrop2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT     // 0 1 2 3 4 5
    3 2 BLKDROP2  // 0 4 5
  }>
  f_blkdrop PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT  // 0 1 2 3 4 5
    3 BLKDROP  // 0 1 2
  }>
  f_blkswx PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT
    3 PUSHINT
    2 PUSHINT  //                    0 1 2 3 4 5 3 2
    BLKSWX     // i: 2, j: 3, stack: 0 4 5 1 2 3
  }>
  f_blkpush PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT    // 0 1 2 3 4 5
    3 2 BLKPUSH  // 0 1 2 3 4 5 3 4 5
  }>
  f_drop2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT  // 0 1 2
    DROP2      // 0
  }>
  f_dropx PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    2 PUSHINT
    2 PUSHINT  //              0 1 2 2 2
    DROPX      // i: 2, stack: 0 1
  }>
  f_dup2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT  // 0 1 2
    DUP2       // 0 1 2 1 2
  }>
  f_push2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT   // 0 1 2
    s1 s1 PUSH2 // 0 1 2 1 1
  }>
  f_push3 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT      // 0 1 2
    s2 s1 s0 PUSH3 // 0 1 2 0 1 2
  }>
  f_xchg2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT    // 0 1 2 3
    s3 s2 XCHG2  // 2 3 0 1
  }>
  f_over2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT // 0 1 2 3
    OVER2     // 0 1 2 3 0 1
  }>
  f_swap2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT // 0 1 2 3 4
    SWAP2     // 0 3 4 1 2
  }>
  f_xcpu PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT  // 0 1 2 3 4
    s1 s3 XCPU // 0 1 2 4 3 1
  }>
  f_tuck PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT  // 0 1 2 3 4
    TUCK       // 0 1 2 4 3 4
  }>
  f_minusrollx PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    2 PUSHINT  //        0 1 2 3 4 2
    -ROLLX     // i: 2,  0 1 4 2 3
  }>
  f_pick PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    1 PUSHINT  //        0 1 2 3 4 1
    PICK       // i: 1,  0 1 4 3 4 3
  }>
  f_puxc PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT   // 0 1 2 3 4 5
    s3 s4 PUXC  // 0 5 2 3 4 2 1
  }>
  f_revx PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT
    3 PUSHINT
    1 PUSHINT  //              0 1 2 3 4 5 3 1
    REVX       // i: 3, j: 1;  0 1 4 3 2 5
  }>
  f_rollx PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT
    3 PUSHINT  //        0 1 2 3 4 5 3
    ROLLX      // i: 3,  0 1 3 4 5 2
  }>
  f_rotrev PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT  // 0 1 2 3 4 5
    ROTREV     // 0 1 2 5 3 4
  }>
  f_xchgx PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    3 PUSHINT  //        0 1 2 3 4 3
    XCHGX      // i: 3,  0 4 2 3 1
  }>
  f_pu2xc PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT       // 0 1 2 3 4 5
    s1 s2 s3 PU2XC  // 0 1 5 3 4 4 3 2
  }>
  f_puxc2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT       // 0 1 2 3 4 5
    s1 s2 s3 PUXC2  // 0 1 4 5 4 3 2
  }>
  f_puxcpu PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT        // 0 1 2 3 4 5
    s1 s2 s3 PUXCPU  // 0 1 2 5 4 4 3 2
  }>
  f_xc2pu PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT       // 0 1 2 3 4 5
    s1 s2 s3 XC2PU  // 0 1 2 5 4 3 2
  }>
  f_xchg3 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT       // 0 1 2 3 4 5
    s5 s3 s4 XCHG3  // 3 5 4 0 2 1
  }>
  f_xcpu2 PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT       // 0 1 2 3 4 5
    s5 s3 s4 XCPU2  // 5 1 2 3 4 0 2 1
  }>
  f_xcpuxc PROC:<{
    0 PUSHINT
    1 PUSHINT
    2 PUSHINT
    3 PUSHINT
    4 PUSHINT
    5 PUSHINT        // 0 1 2 3 4 5
    s5 s3 s4 XCPUXC  // 4 5 2 3 0 2 1
  }>
}END>c